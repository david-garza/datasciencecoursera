iris_hc <- hclust(dist(iris[1:4]))
plot(iris_hc)
plot(iris_hc,lab.col= iris$Species)
plot(iris_hc,col= iris$Species)
plot(iris_hc,col= iris$Species)
heatmap(iris[1:4])
heatmap(as.matrix(iris[1:4]))
iris_hc$merge
plot(iris$Petal.Length,iris$Petal.Width)
plot(iris$Petal.Length,iris$Petal.Width,col=iris$Species)
kmean(iris[3:4],3)
iris_km<-kmeans(iris[3:4],3)
plot(iris$Petal.Length,iris$Petal.Width,col=iris$Species,pch=iris_km$cluster)
iris_km<-kmeans(iris[3:4],2)
plot(iris$Petal.Length,iris$Petal.Width,col=iris$Species,pch=iris_km$cluster)
iris_km<-kmeans(iris[3:4],4)
plot(iris$Petal.Length,iris$Petal.Width,col=iris$Species,pch=iris_km$cluster)
silhoutte(iris_km$cluster)
iris_km<-kmeans(iris[3:4],3)
plot(iris$Petal.Length,iris$Petal.Width,col=iris$Species,pch=iris_km$cluster)
set.seed(12345)
dataMatrix <- matrix(rnorm(400), nrow = 40)
t(dataMatrix)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
nrow(dataMatrix)
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
+ coinFlip <- rbinom(1, size = 1, prob = 0.5)
+
+ ## If coin is heads add a common pattern to that row
+ if (coinFlip) {
+ dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
+ }
+ }
for (i in 1:40) {
coinFlip <- rbinom(1, size = 1, prob = 0.5)
## If coin is heads add a common pattern to that row
if (coinFlip) { dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)}
}
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
library(dplyr)
hh <- dist(dataMatrix) %>% hclust
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
set.seed(12345)
dataMatrix <- matrix(rnorm(400), nrow = 40)
dataMatrix
View(dataMatrix)
t(dataMatrix)[, nrow(dataMatrix):1])
t(dataMatrix)[, nrow(dataMatrix):1]
View(t(dataMatrix)[, nrow(dataMatrix):1])
nrow(dataMatrix)
nrow(dataMatrix):1
dataMatrix[1,1]
dataMatrix[1]
dataMatrix[,1]
dataMatrix[1,]
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {coinFlip <- rbinom(1, size = 1, prob = 0.5) if (coinFlip) {dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)}}
for (i in 1:40) {coinFlip <- rbinom(1, size = 1, prob = 0.5) if (coinFlip) {dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)}}
for (i in 1:40) {
coinFlip <- rbinom(1, size = 1, prob = 0.5)
## If coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
library(dplyr)
hh <- dist(dataMatrix) %>% hclust
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
svd1$u[, 1]
svd1$v[, 1]
plot(1:10,svd1$d)
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1], main = "Original Data")
plot(svd1$u[, 1], 40:1, , ylab = "Row", xlab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
approx <- with(svd1, outer(u[, 1], v[, 1]))
par(mfrow = c(1, 2))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1], main = "Original Matrix")
image(t(approx)[, nrow(approx):1], main = "Approximated Matrix")
approx <- with(svd1, outer(u[, 1:2], v[, 1:2]))
par(mfrow = c(1, 2))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1], main = "Original Matrix")
image(t(approx)[, nrow(approx):1], main = "Approximated Matrix")
approx <- with(svd1, (u[, 1:2]* v[, 1:2]))
approx <- with(svd1, (u[, 1:2]%*% v[, 1:2]))
data("iris")
force(iris)
t.test(iris$Sepal.Length)
t.test(iris$Sepal.Length, mu = 5.84)
x<-c(26,18,21,30,24,21,16,28,35,27)
n<-rep(150,times=10)
prop.test(x,n)
prop.test(x,n,alternative = "less")
prop.test(x,n,p=0.2, alternative = "less")
p<-rep(.20,times=10)
prop.test(x,n,p, alternative = "less")
.20*150
prop.test(30,150,p=0.2,alternative = "less")
prop.test(30,150,p=0.164,alternative = "less")
prop.test(30,150,p=0.164,alternative = "two.sided")
binom.test(30,150,p=.164,alternative = "less")
dbinom(30,150,.164)
1-dbinom(30,150,.164)
pbinom(30,150,.164)
pbinom(1.20,150,.164)
pbinom(30,150,.164)
prop.test(56,100,p=.5)
swirl()
swril()
install.packages("swirl")
library(swirl)
swirl()
10/sqrt(100)
(32-30)/1
(32-30)/(10/sqrt(16))
15
qt(.95,15)
dim(fs)
t.test(fs$fheight,fs$sheight,paired = TRUE)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
mybin[8]
.035
.144
mybin[7]=.144 and mybin[8]=.035
.035
mybin[7]
mybin[7,8]
7
8
library(swirl)
swirl()
pt(q=2.5,df=15,lower.tail = FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail = FALSE)
mybin
pbinom(6,size = 8,prob = 0.5,lower.tail = FALSE)
pbinom(7,size = 8,prob = 0.5,lower.tail = TRUE)
ppois(9,5)
ppois(9,5,lower.tail = FALSE)
n<-9
mu<-1100
sd <- 30
5/2
100-2.5
mu+c(-1,1)*qt(.975,n-1)*sd/sqrt(n)
n<-9
mu<- -2
-mu*sqrt(n)/qt(.975,n-1)
mu_y<-3
s_y<-.6
my_x<-5
s_x<-.68
n_x<-10
n_y<-10
sp<-sqrt((n_x-1)*s_x^2+(n_y-1)*s_y^2)/(n_x+n_y-2))
sp<-sqrt(((n_x-1)*s_x^2+(n_y-1)*s_y^2)/(n_x+n_y-2))
(mu_y-mu_x)+c(-1,1)*qt(.975,(n_x+n_y-2))*sp*sqrt((1/n_x)+(1/n_y))
(mu_y-my_x)+c(-1,1)*qt(.975,(n_x+n_y-2))*sp*sqrt((1/n_x)+(1/n_y))
mu_x<-my_x
rm(my_x)
(mu_y-mu_x)+c(-1,1)*qt(.95,(n_x+n_y-2))*sp*sqrt((1/n_x)+(1/n_y))
mu_diff<-mu_y-mu_x
df<-n_x+n_y-2
n_p<-sqrt((1/n_x)-(1/n_y))
n_p<-sqrt((1/n_x)+(1/n_y))
mu_diff+c(-1,1)*qt(.975,df)*sp*np
mu_diff+c(-1,1)*qt(.975,df)*sp*n_p
mu_diff+c(-1,1)*qt(.95,df)*sp*n_p
s_x<-sqrt(s_x)
s_y<-sqrt(s_y)
(mu_y-my_x)+c(-1,1)*qt(.975,(n_x+n_y-2))*sp*sqrt((1/n_x)+(1/n_y))
(mu_y-mu_x)+c(-1,1)*qt(.975,(n_x+n_y-2))*sp*sqrt((1/n_x)+(1/n_y))
sp<-sqrt(((n_x-1)*s_x^2+(n_y-1)*s_y^2)/(n_x+n_y-2))
(mu_y-mu_x)+c(-1,1)*qt(.975,(n_x+n_y-2))*sp*sqrt((1/n_x)+(1/n_y))
nx<-100
ny<-100
n_old<-100
n_new<-100
mu_old<-6
s_old<-2
mu_new<-4
s_new<-0.5
mu_diff<-mu_old-mu_new
se<-sqrt((s_old^2/n_old)+(s_new^2/n_new))
mu_diff+c(-1,1)*qnorm(.975)*se
mu_t<--3
s_t<-1.5
mu_p<-1
s_p<-1.8
n_p<-9
n_t<-9
df<-n_p+n_t-2
p<-.95
sp<-sqrt(((n_p-1)*s_p^2+(n_t-1)+s_t^2)/df)
se<-sqrt((1/n_p)+(1/n_t))
mu_diff<-mu_t-mu_p
mu_diff+c(-1,1)*qt(p,df)*sp*se
mu_diff+c(-1,1)*qt(.90,df)*sp*se
mu_diff+c(-1,1)*qt(.95,df)*sp*se
mu_diff+c(-1,1)*qt(.98,df)*sp*se
mu_diff+c(-1,1)*qt(.975,df)*sp*se
mu_diff+c(-1,1)*qt(.95,df)*sp*se
mu_diff+c(-1,1)*qt(.92,df)*sp*se
se<-sqrt((1/n_t)+(1/n_p))
df<-n_t+n_p-2
sp_2<-((n_t-1)*s_t^2+(n_p-1)*s_p^2)/df
sqrt(sp_2)
sp<-sqrt(sp_2)
mu_diff+c(-1,1)*qt(.95,df)*sp*se
baseline<-c(140,138,150,148,135)
week2<-c(132,135,151,146,130)
t.test(baseline,wee2,alternative = "two.sided",paired = TRUE)
t.test(baseline,week2,alternative = "two.sided",paired = TRUE)
n<-9
mu<-1100
s<-30
mu+c(-1,1)*qt(.975,n-1)*s/sqrt(n)
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
l<-1
measured_l<-(10/1787)*100
ppois(0,1,lower.tail = FALSE)
ppois(0,1,lower.tail = TRUE)
ppois(measured_l,1,lower.tail = FALSE)
ppois(measured_l,1,lower.tail = TRUE)
ppois(l,measured_l,lower.tail = TRUE)
ppois(l,measured_l,lower.tail = FALSE)
1/100
10/1787
(10/1787)*1000
ppois(5,10,lower.tail = FALSE)
ppois(5,10,lower.tail = TRUE)
n<-9
treat<--3
placebo<-1
st<-1.5
sp<-1.8
diff<-treat-placebo
sp2<-((n-1)*sp^2+(n-1)*st^2)/(n+n-2)
s_p <-sqrt(sp2)
score <- diff/(s_p*sqrt((1/n)+(1/n)))
pt(score,df=16)
nx<-9
ny<-9
mx<--3
my<-1
sx<-1.5
sy<-1.8
sp2<-(nx-1)*sx^2+(ny-1)*sy^2/(nx+ny-2)
sp<-sqrt(sp2)
se<-sp*sqrt((1/nx)+(1/ny))
tscore<-(mx-my)/se
pt(tscore,df=16)
pt(tscore,df=16)*2
n<-100
m<-.01
s<-.04
a<-.05
power.t.test(n,m,s)
power.t.test(n,m,s,alternative = "one.sided")
power.t.test(n=100,delta=.01,sd=.04,alternative = "one.sided")
power.t.test(power=.9,delta=.01,sd=.04,alternative = "one.sided")
ppois(2,1,lower.tail = FALSE)
ppois(2,1,lower.tail = TRUE)
1-ppois(2,1,lower.tail = TRUE)
ppois(1,1,lower.tail = FALSE)
ppois(0,1,lower.tail = FALSE)
r<-10/1787
r<-r*100
ppois(0,r,lower.tail = FALSE)
ppois(0,r,lower.tail = TRUE)
ppois(r,1,lower.tail = FALSE)
ppois(r,1,lower.tail = TRUE)
poisson.test(10,T=1787,r=1/10,alternative = "less")
poisson.test(10,T=1787,r=1/100,alternative = "less")
power.t.test(n=100,delta = .01,sd=.04)
power.t.test(n=100,delta = .01,sd=.04,type = "one.sample",alternative = "one.sided")
power.t.test(power=.9,delta = .01,sd=.04,type = "one.sample",alternative = "one.sided")
n_y <- 9 # subjects treated
n_x <- 9 # subjects placebo
σ_y <- 1.5# kg/m2 std.dev. treated
σ_x <- 1.8# kg/m2 std.dev. placebo
μ_y <- -3#  kg/m2 average difference treated
μ_x <- 1#  kg/m2 average difference placebo
σ_p <- (((n_x - 1) * σ_x^2 + (n_y - 1) * σ_y^2)/(n_x + n_y - 2))
pval <- pt((μ_y - μ_x) / (σ_p * (1 / n_x + 1 / n_y)^.5), df=n_y + n_x -2)
rexp(4,2)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
mns=NULL
mns<-c(mns,mean(runif(40)))
mns<-c(mns,mean(runif(40)))
mns<-c(mns,mean(runif(40)))
mns<-c(mns,mean(runif(40)))
mns<-c(mns,mean(runif(40)))
mns<-c(mns,mean(runif(40)))
mns<-c(mns,mean(runif(40)))
mns<-c(mean(runif(40)))
mns<-c(mean(runif(40)))
mns<-c(mean(runif(40)))
mns<-c(mean(runif(40)))
hist(rexp(1000,0.2))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns)
swirl()
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z<-qnorm(.95)
pnorm(q=30+z,mean=30,lower.tail = FALSE)
pnorm(q=30+z,mean=32,lower.tail = FALSE)
pnorm(q=30+z,mean=32,lower.tail = FALSE,sd=1)
pnorm(q=30+z,mean=32,lower.tail = FALSE,sd=2)
pnorm(q=30+z*2,mean=32,lower.tail = FALSE,sd=2)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 , sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100 , sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, sd=1, n=26, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, sd=1, n=26, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, sd=1, n=27, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues[pValues<.05])
sum(pValues<.05)
sum(p.adjust(pValues<.05,method="bonferroni"))
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
table(pValues2<0.5,trueStatus)
table(pValues2 < 0.05, trueStatus)
0
24/500
table(p.adjust(pValues2 < 0.05), trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
sum(1*1/6,2*1/6,3*1/6,4*1/6,5*1/6,6*1/6)
print(g2)
head(sh)
length(sh)
nh
median(resampledMedians)
median(sh)
sam<-sample(fh,nh*b,replace = TRUE)
sam<-sample(fh,nh*B,replace = TRUE)
resam<-matrix(sam,B,nh)
meds<-apply(resam,1,median)
diff(fh,meds)
fh-meds
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs<-testStat(BCcount,group)
obs<-testStat(BCcounts,group)
obs
mean(Bdata$count)-mean(Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms>obs)
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
load("~/Data Science Class/Statistical Inference Project/.RData")
k<-40
head(rexp(n,l))
head(rexp(n,lambda))
hist(rexp(n,lambda),freq = FALSE,main = paste("Histogram of" , "1 rexp() simulation"),xlab = "Values")
mns<-NULL
sigma<-NULL
rm(mns)
as.matrix(values)
matrix(values)
values<-NULL
rm(sigma)
as.matrix(values)
for(1:k) values<-c(values,rexp(n,lambda))
for(i in 1:k) values<-c(values,rexp(n,lambda))
matrix(values,k,n)
values<-matrix(values,k,n)
obs<-values
rm(values)
mns<-apply(obs,1,mean)
hist(mns)
sigma<-apply(obs,1,sd)
hist(sigma)
mean(mns)
mean(sigma)
knitr::opts_chunk$set(echo = TRUE)
lambda<-0.2
n<-1000
k<-40
set.seed(1234)
knitr::opts_chunk$set(echo = TRUE)
lambda<-0.2
n<-1000
k<-40
set.seed(1234)
knitr::opts_chunk$set(echo = TRUE)
lambda<-0.2
n<-1000
k<-40
set.seed(1234)
mean(apply(obs,1,mean))
t.test<-(apply(obs,1,mean),alternative="two.sided")
t.test<-(apply(obs,1,mean),alternative ="two.sided")
t.test<-(apply(obs,1,mean),alternative ="two.sided",mu=5)
x<-apply(obs,1,mean)
t.test<-(x,alternative ="two.sided",mu=5)
t.test<-(apply(obs,1,mean),mu=5)
rm(x)
rm(mns)
rm(sigma)
t.test(apply(obs,1,mean),alternative ="two.sided",mu=5)
results>-t.test(apply(obs,1,mean),alternative ="two.sided",mu=5)
results<-t.test(apply(obs,1,mean),alternative ="two.sided",mu=5)
results$p.value
results$conf.int
mfcol(1,3)
par(mfcol(1,3))
par(mfcol=c(1,3))
hist(apply(obs,1,mean),main=paste("Histogram of 40 Sample Means"),xlab="Observation")
points(5,6)
hist(apply(obs,1,mean)-5,main=paste("Histogram of 40 Sample Means"),xlab="Observation",freq = FALSE)
lines(range(-0.4,.4),dnorm(range(-0.4,.4)))
range(-0.4,.4)
-0.4:.4
lines(x,dnorm(x))
x<-seq(-.4,.4,by=.01)
lines(x,dnorm(x))
plot(x,dnorm(x))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(n,lambda)))
hist(mns)
hist(mns,freq = FALSE)
lines(x,dnorm(x))
lines(x,dnorm(x),col="red")
lines(x,dnorm(x)*1000,col="red")
hist(mns)
lines(x,dnorm(x)*1000,col="red")
dnorm(x)*1000
dnorm(x)
hist(mns-5)
lines(x,dnorm(x),col="red")
lines(x,dnorm(x)*1000,col="red")
hist(mns-5,freq = FALSE)
lines(x,dnorm(x),col="red")
plot(density(apply(obs,1,mean)))
hist(apply(obs,1,mean),freq = FALSE)
curve(dnorm(x,mean=5))
curve(dnorm(x,mean=5))
rm(x)
hist(apply(obs,1,mean),freq = FALSE)
curve(dnorm(x,mean=5))
pwd()
setwd("~/Data Science Class/Statistical Inference Project")
getwd()
rm(mns)
rm(results)
mns40<-apply(obs,1,mean)
hist(mns40,freq = FALSE)
x<-seq(min(mns40),max(mns40),by=(max(mns40)-min(mns40)/100)
)
x<-seq(min(mns40),max(mns40),by=(max(mns40)-min(mns40)/100))
x<-seq(min(mns40),max(mns40),by=(max(mns40)-min(mns40))/100)
lines(x,dnorm(x,mean=mean(mns40),sd=sd(mns40)))
lines(x,dnorm(x,mean=mean(mns40),sd=sd(mns40)),col="red")
mns80<-NULL
k<-80
for(i in 1:k) mns80<-c(mns80,mean(rexp(n,lambda)))
mns120<-NULL
k<-120
for(i in 1:k) mns120<-c(mns120,mean(rexp(n,lambda)))
hist(mns40,freq = FALSE)
hist(mns80,freq = FALSE)
x<-seq(min(mns80),max(mns80),by=(max(mns80)-min(mns80))/100)
lines(x,dnorm(x,mean=mean(mns80),sd=sd(mns80)),col="red")
par(mfrow=c(3,1))
hist(mns40,freq = FALSE,main ="40 Sample Means")
save.image("~/Data Science Class/Statistical Inference Project/.RData")
